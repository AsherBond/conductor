- content_for :scripts do
  :javascript
    $(document).ready(function() {
      // FIXME: don't know, how to disable first ajax load.
      // On ajax load, new data are only appended to existing content
      // workaround is to delete existing content before load
      $(".groups_to_select").remove();
      $("#dashboard-tabs").tabs({
        spinner: "Loading...",
        load: function(event, ui) {
          $("a.select_group").click(function(ev) {
            $("#selected_packages").load($(ev.target).attr('href'), loadCallback);
            return false;
          });
          $("a.select_package").click(function(ev) {
            $("#selected_packages").load($(ev.target).attr('href'), loadCallback);
            return false;
          });
        }
      });
      // when JS is enabled, hide the Dashboard content -- it'll be loaded
      // by jquery UI tab using ajax
      $("#dashboard-content").hide();
      loadCallback();
    });
    function loadCallback() {
      $("a.remove_group").click(function(ev) {
        $("#selected_packages").load($(ev.target).attr('href'), loadCallback);
        return false;
      });
      createTree();
    };
    function createTree() {
      $("li.group").each(function() {
        var group = $(this);
        group.addClass("closed_folder");
        $(".groupname", group).toggle(
          function() {
            group.removeClass("closed_folder");
            group.addClass("opened_folder");
            $("ul > li", group).removeClass("hidden");
          }, function() {
            group.removeClass("opened_folder");
            group.addClass("closed_folder");
            $("ul > li", group).addClass("hidden");
          }
        );
      })
      $("li.group > ul > li").addClass("hidden");
    };
    function get_repository(ev) {
      var rep = $(ev.target).val();
      $("#dashboard-tabs > ul > li > a").each(function(index) {
        var link = $(this).data('load.tabs');
        if (link.search(/repository=[^$&]*/) == -1) {
          link = link + "&repository=" + rep;
        } else {
          link = link.replace(/repository=[^$&]*/, "repository="+rep);
        }
        $("#dashboard-tabs").tabs('url', index, link);
      });
      $("#dashboard-tabs").tabs('load', $("#dashboard-tabs").tabs('option', 'selected'));
    };

- menu = [ { :text => "Groups", :tab => "groups" }, |
  { :text => "Packages", :tab => "packages" }, ] |
#clear
  %h3 Software
  = hidden_field_tag 'xml[set_packages]', true
  .pkglist_wrapper
    .pkglist
      #dashboard-tabs{ :class => "ui-tabs ui-widget ui-widget-content ui-corner-all" }
        %ul{ :class => "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header" }
          - menu.each do |item|
            - selection_style = "ui-tabs-selected ui-state-active" if item[:tab] == @selected_tab
            %li{ :class => "#{selection_style} ui-state-default ui-corner-top", :style => 'clear: none' }
              = "<a href=\"#{url_for(:action => "software", :id => @image_descriptor, :tab => item[:tab])}\"><span>#{item[:text]}</span></a>"
          %li{ :class => "select_repository"}
            = select_tag("repository", (["<option value='all' selected='selected'>All</option>"] + @repository_manager.repositories.map{|rep| "<option value=\"#{rep.id}\">#{rep.name}</option>"}).join.html_safe, {:onchange => "get_repository(event)"})
        - unless request.xhr?
          = render :partial => @selected_tab
    .pkglist{:style => "margin-left: 30px", :class => "left-pkglist"}
      %div{:class => "ui-tabs ui-widget ui-widget-content ui-corner-all ui-helper-reset ui-helper-clearfix ui-widget-header"}
        Selected packages
      = render :partial => 'selected_packages'
